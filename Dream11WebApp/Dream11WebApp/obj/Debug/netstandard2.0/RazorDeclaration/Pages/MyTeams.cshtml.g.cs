#pragma checksum "F:\CurrentWorkBk\GitRbackup\Dream11WebApp\Dream11WebApp\Pages\MyTeams.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "53fc87b199ccf20993c2af6f0565eb27331d3252"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Dream11WebApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using Dream11WebApp;
    using Dream11WebApp.Shared;
    using Microsoft.AspNetCore.Components.Services;
    using Dream11WebApp.Model;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Components.RouteAttribute("/MyTeams/{matchid:int}")]
    public class MyTeams : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 141 "F:\CurrentWorkBk\GitRbackup\Dream11WebApp\Dream11WebApp\Pages\MyTeams.cshtml"
           
    [Parameter]
    int matchid { get; set; }
    bool btnpreview { get; set; } = false;
    int teamcount { get; set; }
    Object autoken { get; set; }
    [Parameter]
    UserTeams[] userPlayer { get; set; }
    UserTeams[] userTeamPlayer { get; set; }
    Player2[] players { get; set; }
    protected override async Task OnInitAsync()
    {
        await LoadUserTeams(matchid);
    }
    async Task LoadUserTeams(int matchid)
    {
        autoken = await new ExampleJsInterop(JSRuntime).GetStringItem<Object>
            ("utoken");
        userTeamPlayer = await userTeam.GetUserTeams(matchid, autoken);

        teamcount = userTeamPlayer.Length + 1;
    }
    private void CreateTeam()
    {
        uriHelper.NavigateTo("/Players/" + matchid + "/0");
    }
    private void PreviewUserTeam(int userteamId)
    {
        userPlayer = userTeamPlayer.Where(u => u.matchId == matchid && u.userTeamId == userteamId).ToArray();
        btnpreview = true;
    }

    private void Edit(int userteamId)
    {

        uriHelper.NavigateTo("/Players/" + matchid + "/" + userteamId);
    }
    private void Clone(int userteamId)
    {

        uriHelper.NavigateTo("/Players/" + matchid + "/" + userteamId);
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserCustomTeam userTeam { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUriHelper uriHelper { get; set; }
    }
}
#pragma warning restore 1591
