#pragma checksum "F:\CurrentWorkBk\GitRbackup\Dream11WebApp\Dream11WebApp\Pages\SaveTeam.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1777ec8abaf012acd9f6aad22e1c3a2ea58d51ea"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Dream11WebApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using Dream11WebApp;
    using Dream11WebApp.Shared;
    using Microsoft.AspNetCore.Components.Services;
    using Dream11WebApp.Model;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Components.RouteAttribute("/SaveTeam/{matchid:int}/{userteamid:int}")]
    public class SaveTeam : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 182 "F:\CurrentWorkBk\GitRbackup\Dream11WebApp\Dream11WebApp\Pages\SaveTeam.cshtml"
           

    //List<Player>
    //playerList => appState.players.ToList();
    [Parameter]
    int matchid { get; set; }
    [Parameter]
    int userteamid { get; set; }
    List<Player2> selectedPlayer { get; set; }
    List<Player2> playerList { get; set; }
    UserTeam userTeam { get; set; }
    bool btncaption { get; set; } = false;
    bool btnvicecaption { get; set; } = false;
    bool btnsave { get; set; } = false;

    //   List<Player>
    //selectedPlayer => appState.players.ToList();
    //protected override void OnInit()
    //{
    //       appState.OnPlayerDisplay += StateHasChanged;
    //}

    ExampleJsInterop exampleJsInterop;
    Object authToken { get; set; }
    protected override async Task OnInitAsync()
    {
        exampleJsInterop = new ExampleJsInterop(JSRuntime);
        playerList = await exampleJsInterop.GetItem<List<Player2>>("CreateTeam");

        authToken = await exampleJsInterop.GetStringItem<Object>("utoken");
        if (playerList == null)
        {
            selectedPlayer = await playerobj.GetPlayerData(matchid, userteamid, authToken);
            selectedPlayer = selectedPlayer.Where(p => p.player.isSelected == true).ToList();
        }
        else
        {
            selectedPlayer = playerList.Where(p => p.player.isSelected == true).ToList();
        }

        //string _saveteam = playerList.Where(p => p.isCaptain == true && p.isViceCaptain == true).ToString();
        //if (!string.IsNullOrEmpty(_saveteam)) this.btnsave = false;
    }

    List<Player2> playerList1 { get; set; }
    private bool CheckUserSelectionCapViceCap()
    {
        LocalGetData();
        var capteam = playerList1.Where(p => p.isCaptain == true).ToString();
        var vicecapteam = playerList1.Where(p => p.isViceCaptain == true).ToString();
        if ((capteam != string.Empty || capteam != "" || capteam != null) && (vicecapteam != string.Empty || vicecapteam != "" || vicecapteam != null))
        {
            return true;
        }
        else { return false; }
    }

    private async Task LocalGetData()
    {
        playerList1 = await exampleJsInterop.GetItem<List<Player2>>("CreateTeam");
    }

    private void SelectCaption(Player2 player)
    {
        for (int i = 0; i < playerList.Count; i++)
        {
            if (player.playerId == playerList[i].playerId)
            {
                playerList[i].isCaptain = true;
                playerList[i].isViceCaptain = false;
            }
            else
            {
                playerList[i].isCaptain = false;
            }
        }


        //for (int i = 0; i < selectedPlayer.Count; i++)
        //{

        //    if (player.playerId == selectedPlayer[i].playerId)
        //    {
        //        selectedPlayer[i].isCaptain = true;
        //    }
        //    else
        //    {
        //        selectedPlayer[i].isCaptain = false;
        //    }
        //}
        ChangePlayerStatus(playerList);

        btnsave = CheckUserSelectionCapViceCap();
    }

    private async Task ChangePlayerStatus(List<Player2> playerList)
    {
        // userTeam = common.localAddPlayer(playerList, matchid);
        await exampleJsInterop.SetItem<List<Player2>>("CreateTeam", playerList);
        //  await exampleJsInterop.SetItem<UserTeam>("CreateTeam", userTeam);

    }

    private void SelectViceCaption(Player2 player)
    {
        //  btnvicecaption = true;

        for (int i = 0; i < playerList.Count; i++)
        {
            if (player.playerId == playerList[i].playerId)
            {
                playerList[i].isViceCaptain = true;
                playerList[i].isCaptain = false;
            }
            else { playerList[i].isViceCaptain = false; }
        }

        //for (int i = 0; i < selectedPlayer.Count; i++)
        //{
        //    if (player.playerId == selectedPlayer[i].playerId)
        //    {
        //        selectedPlayer[i].isViceCaptain = true;
        //    }
        //    else { selectedPlayer[i].isViceCaptain = false; }
        //}
        ChangePlayerStatus(playerList);

        btnsave = CheckUserSelectionCapViceCap();
    }

    private async Task UserSaveTeam()
    {
        var playerListobj = await exampleJsInterop.GetItem<List<Player2>>("CreateTeam");

        if (playerListobj == null) playerListobj = selectedPlayer.Where(p => p.player.isSelected == true).ToList();;

        UserTeam userTeam = new UserTeam();
        foreach (var player in playerListobj.Where(p => p.player.isSelected == true).ToList())
        {
            userTeam.matchid = matchid;
            userTeam.players.Add(new Player2()
            {
                playerId = player.playerId,
                player = player.player,
                isCaptain = player.isCaptain,
                isViceCaptain = player.isViceCaptain
                //point = player.points
            });
        }

        //userTeam = common.localAddPlayer(playerList, matchid);

        //userTeam.players = playerList.Where(p => p.isSelected == true).ToList();
       // await exampleJsInterop.SetItem<UserTeam>("SaveTeam", userTeam);
        await userSaveTeam.SaveTeam(userTeam, authToken);
        await exampleJsInterop.RemoveItem("CreateTeam");
        uriHelper.NavigateTo("/Contest/" + matchid);
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IplayerData playerobj { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Common common { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUriHelper uriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserCustomTeam userSaveTeam { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppState appState { get; set; }
    }
}
#pragma warning restore 1591
