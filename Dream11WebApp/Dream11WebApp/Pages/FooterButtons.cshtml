<div class="contest-footer container_607ce">
    <div class="js--contest-footer innerContainer_b8f9b">
        <div class="button-group">
            <a class="btn btn--flat btn--bordered createbtn--bordered--white" style="border-color:white">
                @if (teamCount == 0)
                {<div class="text-color--white" onclick="@CreateTeam">Create Team</div>}
                else
                { <div class="text-color--white" onclick="@MyTeam">My Team (@teamCount)</div>}
            </a>
            <a class="btn btn--flat btn--background--white">
                <div class="js--contest-footer__joined-contests-btn">
                    <div class="buttonItemContainer_029e0">
                        @if (joincontestcount == 0)
                        {<div>Joined Contests</div> }
                        else
                        { <div>Joined Contests (1)</div>}
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>
@inject IJSRuntime JSRuntime
@inject IUriHelper uriHelper
@inject IUserCustomTeam UserTeam
@functions{
    [Parameter]
    int matchid { get; set; }
    private int teamCount { get; set; }
    private int joincontestcount { get; set; } = 0;
    Object autoken { get; set; }
    protected override async Task OnInitAsync()
    {
        await GetUserTeamCount();
    }
    async Task GetUserTeamCount()
    {
        autoken = await new ExampleJsInterop(JSRuntime).GetStringItem<Object>
     ("utoken");
        teamCount = await UserTeam.UserTeams(matchid, autoken);
    }
    private void CreateTeam()
    {
        uriHelper.NavigateTo("/Players/" + matchid + "/0");
    }

    private void MyTeam()
    {
        uriHelper.NavigateTo("/MyTeams/" + matchid);
    }
    [Parameter]
    private EventCallback<int> matchidChanged { get; set; }
}
