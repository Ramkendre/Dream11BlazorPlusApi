@page "/"

@inject IUriHelper UriHelper
@inject ToastService toastService
@inject ILogin LoginData
@*<form>*@
<div style="margin-top: 10px"></div>
<div class="page-header text-center">
    <h1>Login</h1>
</div>
<div class="form-group">
    <label for="username">Email address:</label>
    <input type="text" bind="@register.username" class="form-control" />
</div>
<div class="form-group">
    <label for="pwd">Password:</label>
    <input type="password" bind="@register.password" class="form-control" />
</div>
<div class="row">
    <div class="col-xs-6 col-sm-6 col-md-6">
        <div class="form-group">
            <button type="submit" onclick="@Login" class="btn btn-info btn-block">Submit</button>     @*onclick="@(async () => await Login())"*@
        </div>
    </div>
    <div class="col-xs-6 col-sm-6 col-md-6">
        <div class="form-group">
            <a href="/Registration">Create an account!</a>
        </div>
    </div>

</div>
@*</form>*@

<AdImage></AdImage>
 
@inject IJSRuntime JSRuntime
@functions{
    Login register = new Login();
    Login Registers;
    ExampleJsInterop exampleJsInterop;

    async Task Login()
    {
        exampleJsInterop = new ExampleJsInterop(JSRuntime);

        //Registers = await LoginData.UserLoginAsync(register);
        //Console.WriteLine(Registers);
        //if (Registers == null)
        //{
        //    error = "someting its wrong!!!";
        //}
        //else
        //{
        //   UriHelper.NavigateTo("/Home");
        //}

        if (register.username == null || register.password == null)
        {
            toastService.ShowToast("Can not null username & password", Common.ToastLevel.Error);
        }
        else
        {
            Registers = await LoginData.UserLoginAsync(register);
            Console.WriteLine(Registers);
            if (Registers.firstName != null)
            {
                toastService.ShowToast("Welcome to " + Registers.username + "", Common.ToastLevel.Success);
                await exampleJsInterop.SetStringItem<Login>("utoken",Registers.authToken);
                UriHelper.NavigateTo("/Home");
            }
            else
            {
                toastService.ShowToast("Something it's wrong", Common.ToastLevel.Error);
            }
        }

    }
}

<style>
    .btn {
        -webkit-tap-highlight-color: transparent;
        border: 0;
        cursor: pointer;
        height: 28px;
        margin: 0;
        padding: 0 15px;
        text-decoration: none;
        text-transform: uppercase;
        text-align: center;
        border-radius: 4px;
        font-family: inherit;
        font-size: var(--font-small);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .form-group {
        margin-left: 1rem;
        margin-right: 2rem;
    }

    .btn-primary {
        margin-left: 1rem;
    }

    .row {
        margin-left: -16px;
    }
</style>



@*@inject ToastService toastService

    <h1>Hello, world!</h1>

        Welcome to your new app.


    <button class="btn btn-info" onclick="@(() => toastService.ShowToast("I'm an INFO message", Common.ToastLevel.Info))">Info Toast</button>
    <button class="btn btn-success" onclick="@(() => toastService.ShowToast("I'm a SUCCESS message", Common.ToastLevel.Success))">Success Toast</button>
    <button class="btn btn-warning" onclick="@(() => toastService.ShowToast("I'm a WARNING message", Common.ToastLevel.Warning))">Warning Toast</button>
    <button class="btn btn-danger" onclick="@Login">Error Toast</button>


    @functions{
        void Login()
        {
            //toastService.ShowToast("I'm an ERROR ", Common.ToastLevel.Error);
              UriHelper.NavigateTo("/Home");
        }
    }*@


@*@inject IJSRuntime JSRuntime
    <button type="button" class="btn btn-primary" onclick="@TriggerNetInstanceMethod">
        Trigger .NET instance method HelloHelper.SayHello
    </button>
    @functions {
        public async void TriggerNetInstanceMethod()
        {
            var exampleJsInterop = new ExampleJsInterop(JSRuntime);
            //await exampleJsInterop.CallHelloHelperSayHello("Blazor");
            Match match = new Match()
            {
                matchId = 1,
                name = "India",
                seriesName = "ODI",
                tImeSlot = "12.0.3",
                sport = "Cricket",
            };
            await exampleJsInterop.SetItem<Match>("UserTeam2", match);
        }
    }*@




@*@if (pagevisible == false)
    {
        <h1>Shopping List</h1>
        @using Dream11WebApp.Model
        <p>Number of items in shopping list: @currentCount</p>
        <label for="newItem">Add new Item</label>
        <input type="text" name="item" value="" bind="@Item" />

        <button class="btn btn-primary" onclick="@AddToList">Add to list</button>

        <button class="btn btn-primary" onclick="@GoToNextPaget">Go to next page</button>

    }
    else
    {
       // <FetchData ShoppingItems="@ShoppingItems"></FetchData>
    }

    @functions {

        [Parameter]
        private string Item { get; set; }
        int currentCount = 0;
        // static List<ShopItem> ShoppingItems = new List<ShopItem>();
        bool pagevisible { get; set; } = false;
        void AddToList()
        {
            currentCount++;
            //ShoppingItems.Add(Item);

            new Shop().AddItem(new ShopItem { Item = Item });

        }
        void GoToNextPaget()
        {
            UriHelper.NavigateTo("/Counter");
            //pagevisible = true;
        }
    }*@
